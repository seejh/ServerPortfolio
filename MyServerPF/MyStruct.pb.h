// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyStruct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MyStruct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MyStruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "MyEnum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MyStruct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MyStruct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MyStruct_2eproto;
namespace PROTOCOL {
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Room;
struct RoomDefaultTypeInternal;
extern RoomDefaultTypeInternal _Room_default_instance_;
class RoomList;
struct RoomListDefaultTypeInternal;
extern RoomListDefaultTypeInternal _RoomList_default_instance_;
}  // namespace PROTOCOL
PROTOBUF_NAMESPACE_OPEN
template<> ::PROTOCOL::Player* Arena::CreateMaybeMessage<::PROTOCOL::Player>(Arena*);
template<> ::PROTOCOL::Room* Arena::CreateMaybeMessage<::PROTOCOL::Room>(Arena*);
template<> ::PROTOCOL::RoomList* Arena::CreateMaybeMessage<::PROTOCOL::RoomList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PROTOCOL {

// ===================================================================

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PROTOCOL.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit constexpr Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Player& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PROTOCOL.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kWinCountFieldNumber = 2,
    kLoseCountFieldNumber = 3,
    kPlayerTypeFieldNumber = 4,
  };
  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 winCount = 2;
  void clear_wincount();
  uint64_t wincount() const;
  void set_wincount(uint64_t value);
  private:
  uint64_t _internal_wincount() const;
  void _internal_set_wincount(uint64_t value);
  public:

  // uint64 loseCount = 3;
  void clear_losecount();
  uint64_t losecount() const;
  void set_losecount(uint64_t value);
  private:
  uint64_t _internal_losecount() const;
  void _internal_set_losecount(uint64_t value);
  public:

  // .PROTOCOL.PlayerStateType playerType = 4;
  void clear_playertype();
  ::PROTOCOL::PlayerStateType playertype() const;
  void set_playertype(::PROTOCOL::PlayerStateType value);
  private:
  ::PROTOCOL::PlayerStateType _internal_playertype() const;
  void _internal_set_playertype(::PROTOCOL::PlayerStateType value);
  public:

  // @@protoc_insertion_point(class_scope:PROTOCOL.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t id_;
  uint64_t wincount_;
  uint64_t losecount_;
  int playertype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyStruct_2eproto;
};
// -------------------------------------------------------------------

class Room final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PROTOCOL.Room) */ {
 public:
  inline Room() : Room(nullptr) {}
  ~Room() override;
  explicit constexpr Room(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Room(const Room& from);
  Room(Room&& from) noexcept
    : Room() {
    *this = ::std::move(from);
  }

  inline Room& operator=(const Room& from) {
    CopyFrom(from);
    return *this;
  }
  inline Room& operator=(Room&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Room& default_instance() {
    return *internal_default_instance();
  }
  static inline const Room* internal_default_instance() {
    return reinterpret_cast<const Room*>(
               &_Room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Room& a, Room& b) {
    a.Swap(&b);
  }
  inline void Swap(Room* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Room* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Room* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Room>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Room& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Room& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Room* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PROTOCOL.Room";
  }
  protected:
  explicit Room(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 4,
    kRoomNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kPlayerCountFieldNumber = 3,
  };
  // repeated .PROTOCOL.Player players = 4;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::PROTOCOL::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::Player >*
      mutable_players();
  private:
  const ::PROTOCOL::Player& _internal_players(int index) const;
  ::PROTOCOL::Player* _internal_add_players();
  public:
  const ::PROTOCOL::Player& players(int index) const;
  ::PROTOCOL::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::Player >&
      players() const;

  // string roomName = 2;
  void clear_roomname();
  const std::string& roomname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomname();
  PROTOBUF_NODISCARD std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 playerCount = 3;
  void clear_playercount();
  uint64_t playercount() const;
  void set_playercount(uint64_t value);
  private:
  uint64_t _internal_playercount() const;
  void _internal_set_playercount(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PROTOCOL.Room)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::Player > players_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  uint64_t id_;
  uint64_t playercount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyStruct_2eproto;
};
// -------------------------------------------------------------------

class RoomList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PROTOCOL.RoomList) */ {
 public:
  inline RoomList() : RoomList(nullptr) {}
  ~RoomList() override;
  explicit constexpr RoomList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomList(const RoomList& from);
  RoomList(RoomList&& from) noexcept
    : RoomList() {
    *this = ::std::move(from);
  }

  inline RoomList& operator=(const RoomList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomList& operator=(RoomList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomList& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomList* internal_default_instance() {
    return reinterpret_cast<const RoomList*>(
               &_RoomList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoomList& a, RoomList& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoomList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PROTOCOL.RoomList";
  }
  protected:
  explicit RoomList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomsFieldNumber = 1,
  };
  // repeated .PROTOCOL.Room rooms = 1;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;
  public:
  void clear_rooms();
  ::PROTOCOL::Room* mutable_rooms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::Room >*
      mutable_rooms();
  private:
  const ::PROTOCOL::Room& _internal_rooms(int index) const;
  ::PROTOCOL::Room* _internal_add_rooms();
  public:
  const ::PROTOCOL::Room& rooms(int index) const;
  ::PROTOCOL::Room* add_rooms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::Room >&
      rooms() const;

  // @@protoc_insertion_point(class_scope:PROTOCOL.RoomList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::Room > rooms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyStruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Player

// uint64 id = 1;
inline void Player::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t Player::_internal_id() const {
  return id_;
}
inline uint64_t Player::id() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.Player.id)
  return _internal_id();
}
inline void Player::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void Player::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PROTOCOL.Player.id)
}

// uint64 winCount = 2;
inline void Player::clear_wincount() {
  wincount_ = uint64_t{0u};
}
inline uint64_t Player::_internal_wincount() const {
  return wincount_;
}
inline uint64_t Player::wincount() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.Player.winCount)
  return _internal_wincount();
}
inline void Player::_internal_set_wincount(uint64_t value) {
  
  wincount_ = value;
}
inline void Player::set_wincount(uint64_t value) {
  _internal_set_wincount(value);
  // @@protoc_insertion_point(field_set:PROTOCOL.Player.winCount)
}

// uint64 loseCount = 3;
inline void Player::clear_losecount() {
  losecount_ = uint64_t{0u};
}
inline uint64_t Player::_internal_losecount() const {
  return losecount_;
}
inline uint64_t Player::losecount() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.Player.loseCount)
  return _internal_losecount();
}
inline void Player::_internal_set_losecount(uint64_t value) {
  
  losecount_ = value;
}
inline void Player::set_losecount(uint64_t value) {
  _internal_set_losecount(value);
  // @@protoc_insertion_point(field_set:PROTOCOL.Player.loseCount)
}

// .PROTOCOL.PlayerStateType playerType = 4;
inline void Player::clear_playertype() {
  playertype_ = 0;
}
inline ::PROTOCOL::PlayerStateType Player::_internal_playertype() const {
  return static_cast< ::PROTOCOL::PlayerStateType >(playertype_);
}
inline ::PROTOCOL::PlayerStateType Player::playertype() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.Player.playerType)
  return _internal_playertype();
}
inline void Player::_internal_set_playertype(::PROTOCOL::PlayerStateType value) {
  
  playertype_ = value;
}
inline void Player::set_playertype(::PROTOCOL::PlayerStateType value) {
  _internal_set_playertype(value);
  // @@protoc_insertion_point(field_set:PROTOCOL.Player.playerType)
}

// -------------------------------------------------------------------

// Room

// uint64 id = 1;
inline void Room::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t Room::_internal_id() const {
  return id_;
}
inline uint64_t Room::id() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.Room.id)
  return _internal_id();
}
inline void Room::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void Room::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PROTOCOL.Room.id)
}

// string roomName = 2;
inline void Room::clear_roomname() {
  roomname_.ClearToEmpty();
}
inline const std::string& Room::roomname() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.Room.roomName)
  return _internal_roomname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Room::set_roomname(ArgT0&& arg0, ArgT... args) {
 
 roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PROTOCOL.Room.roomName)
}
inline std::string* Room::mutable_roomname() {
  std::string* _s = _internal_mutable_roomname();
  // @@protoc_insertion_point(field_mutable:PROTOCOL.Room.roomName)
  return _s;
}
inline const std::string& Room::_internal_roomname() const {
  return roomname_.Get();
}
inline void Room::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Room::_internal_mutable_roomname() {
  
  return roomname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Room::release_roomname() {
  // @@protoc_insertion_point(field_release:PROTOCOL.Room.roomName)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Room::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PROTOCOL.Room.roomName)
}

// uint64 playerCount = 3;
inline void Room::clear_playercount() {
  playercount_ = uint64_t{0u};
}
inline uint64_t Room::_internal_playercount() const {
  return playercount_;
}
inline uint64_t Room::playercount() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.Room.playerCount)
  return _internal_playercount();
}
inline void Room::_internal_set_playercount(uint64_t value) {
  
  playercount_ = value;
}
inline void Room::set_playercount(uint64_t value) {
  _internal_set_playercount(value);
  // @@protoc_insertion_point(field_set:PROTOCOL.Room.playerCount)
}

// repeated .PROTOCOL.Player players = 4;
inline int Room::_internal_players_size() const {
  return players_.size();
}
inline int Room::players_size() const {
  return _internal_players_size();
}
inline void Room::clear_players() {
  players_.Clear();
}
inline ::PROTOCOL::Player* Room::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:PROTOCOL.Room.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::Player >*
Room::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:PROTOCOL.Room.players)
  return &players_;
}
inline const ::PROTOCOL::Player& Room::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::PROTOCOL::Player& Room::players(int index) const {
  // @@protoc_insertion_point(field_get:PROTOCOL.Room.players)
  return _internal_players(index);
}
inline ::PROTOCOL::Player* Room::_internal_add_players() {
  return players_.Add();
}
inline ::PROTOCOL::Player* Room::add_players() {
  ::PROTOCOL::Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:PROTOCOL.Room.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::Player >&
Room::players() const {
  // @@protoc_insertion_point(field_list:PROTOCOL.Room.players)
  return players_;
}

// -------------------------------------------------------------------

// RoomList

// repeated .PROTOCOL.Room rooms = 1;
inline int RoomList::_internal_rooms_size() const {
  return rooms_.size();
}
inline int RoomList::rooms_size() const {
  return _internal_rooms_size();
}
inline void RoomList::clear_rooms() {
  rooms_.Clear();
}
inline ::PROTOCOL::Room* RoomList::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:PROTOCOL.RoomList.rooms)
  return rooms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::Room >*
RoomList::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:PROTOCOL.RoomList.rooms)
  return &rooms_;
}
inline const ::PROTOCOL::Room& RoomList::_internal_rooms(int index) const {
  return rooms_.Get(index);
}
inline const ::PROTOCOL::Room& RoomList::rooms(int index) const {
  // @@protoc_insertion_point(field_get:PROTOCOL.RoomList.rooms)
  return _internal_rooms(index);
}
inline ::PROTOCOL::Room* RoomList::_internal_add_rooms() {
  return rooms_.Add();
}
inline ::PROTOCOL::Room* RoomList::add_rooms() {
  ::PROTOCOL::Room* _add = _internal_add_rooms();
  // @@protoc_insertion_point(field_add:PROTOCOL.RoomList.rooms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::Room >&
RoomList::rooms() const {
  // @@protoc_insertion_point(field_list:PROTOCOL.RoomList.rooms)
  return rooms_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PROTOCOL

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MyStruct_2eproto
