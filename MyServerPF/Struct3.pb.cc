// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct3.proto

#include "Struct3.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PROTOCOL {
constexpr ACTOR::ACTOR(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(uint64_t{0u})
  , actortype_(0)

  , locationx_(0)
  , locationy_(0)
  , locationz_(0)
  , rotationyaw_(0)
  , rotationpitch_(0)
  , rotationroll_(0)
  , velocityx_(0)
  , velocityy_(0)
  , velocityz_(0)
  , hp_(0){}
struct ACTORDefaultTypeInternal {
  constexpr ACTORDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ACTORDefaultTypeInternal() {}
  union {
    ACTOR _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ACTORDefaultTypeInternal _ACTOR_default_instance_;
constexpr ACTORLIST::ACTORLIST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_(){}
struct ACTORLISTDefaultTypeInternal {
  constexpr ACTORLISTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ACTORLISTDefaultTypeInternal() {}
  union {
    ACTORLIST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ACTORLISTDefaultTypeInternal _ACTORLIST_default_instance_;
}  // namespace PROTOCOL
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Struct3_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Struct3_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Struct3_2eproto = nullptr;

const uint32_t TableStruct_Struct3_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ACTOR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ACTOR, index_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ACTOR, actortype_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ACTOR, locationx_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ACTOR, locationy_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ACTOR, locationz_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ACTOR, rotationyaw_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ACTOR, rotationpitch_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ACTOR, rotationroll_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ACTOR, velocityx_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ACTOR, velocityy_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ACTOR, velocityz_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ACTOR, hp_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ACTOR, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ACTORLIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ACTORLIST, players_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PROTOCOL::ACTOR)},
  { 19, -1, -1, sizeof(::PROTOCOL::ACTORLIST)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_ACTOR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_ACTORLIST_default_instance_),
};

const char descriptor_table_protodef_Struct3_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rStruct3.proto\022\010PROTOCOL\032\013Enum3.proto\"\213"
  "\002\n\005ACTOR\022\r\n\005index\030\001 \001(\004\022\'\n\tactortype\030\002 \001"
  "(\0162\024.PROTOCOL.ACTOR_TYPE\022\021\n\tlocationX\030\003 "
  "\001(\002\022\021\n\tlocationY\030\004 \001(\002\022\021\n\tlocationZ\030\005 \001("
  "\002\022\023\n\013rotationYaw\030\006 \001(\002\022\025\n\rrotationPitch\030"
  "\007 \001(\002\022\024\n\014rotationRoll\030\010 \001(\002\022\021\n\tvelocityX"
  "\030\t \001(\002\022\021\n\tvelocityY\030\n \001(\002\022\021\n\tvelocityZ\030\013"
  " \001(\002\022\n\n\002hp\030\014 \001(\002\022\n\n\002ID\030\r \001(\t\"-\n\tACTORLIS"
  "T\022 \n\007players\030\001 \003(\0132\017.PROTOCOL.ACTORb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Struct3_2eproto_deps[1] = {
  &::descriptor_table_Enum3_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Struct3_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct3_2eproto = {
  false, false, 363, descriptor_table_protodef_Struct3_2eproto, "Struct3.proto", 
  &descriptor_table_Struct3_2eproto_once, descriptor_table_Struct3_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_Struct3_2eproto::offsets,
  file_level_metadata_Struct3_2eproto, file_level_enum_descriptors_Struct3_2eproto, file_level_service_descriptors_Struct3_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Struct3_2eproto_getter() {
  return &descriptor_table_Struct3_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Struct3_2eproto(&descriptor_table_Struct3_2eproto);
namespace PROTOCOL {

// ===================================================================

class ACTOR::_Internal {
 public:
};

ACTOR::ACTOR(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.ACTOR)
}
ACTOR::ACTOR(const ACTOR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&hp_) -
    reinterpret_cast<char*>(&index_)) + sizeof(hp_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.ACTOR)
}

inline void ACTOR::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hp_) -
    reinterpret_cast<char*>(&index_)) + sizeof(hp_));
}

ACTOR::~ACTOR() {
  // @@protoc_insertion_point(destructor:PROTOCOL.ACTOR)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ACTOR::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ACTOR::ArenaDtor(void* object) {
  ACTOR* _this = reinterpret_cast< ACTOR* >(object);
  (void)_this;
}
void ACTOR::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ACTOR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ACTOR::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.ACTOR)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hp_) -
      reinterpret_cast<char*>(&index_)) + sizeof(hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ACTOR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.ACTOR_TYPE actortype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_actortype(static_cast<::PROTOCOL::ACTOR_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // float locationX = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          locationx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float locationY = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          locationy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float locationZ = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          locationz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rotationYaw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          rotationyaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rotationPitch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          rotationpitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rotationRoll = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          rotationroll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float velocityX = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          velocityx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float velocityY = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          velocityy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float velocityZ = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          velocityz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float hp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string ID = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PROTOCOL.ACTOR.ID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ACTOR::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.ACTOR)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_index(), target);
  }

  // .PROTOCOL.ACTOR_TYPE actortype = 2;
  if (this->_internal_actortype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_actortype(), target);
  }

  // float locationX = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locationx = this->_internal_locationx();
  uint32_t raw_locationx;
  memcpy(&raw_locationx, &tmp_locationx, sizeof(tmp_locationx));
  if (raw_locationx != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_locationx(), target);
  }

  // float locationY = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locationy = this->_internal_locationy();
  uint32_t raw_locationy;
  memcpy(&raw_locationy, &tmp_locationy, sizeof(tmp_locationy));
  if (raw_locationy != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_locationy(), target);
  }

  // float locationZ = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locationz = this->_internal_locationz();
  uint32_t raw_locationz;
  memcpy(&raw_locationz, &tmp_locationz, sizeof(tmp_locationz));
  if (raw_locationz != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_locationz(), target);
  }

  // float rotationYaw = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotationyaw = this->_internal_rotationyaw();
  uint32_t raw_rotationyaw;
  memcpy(&raw_rotationyaw, &tmp_rotationyaw, sizeof(tmp_rotationyaw));
  if (raw_rotationyaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_rotationyaw(), target);
  }

  // float rotationPitch = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotationpitch = this->_internal_rotationpitch();
  uint32_t raw_rotationpitch;
  memcpy(&raw_rotationpitch, &tmp_rotationpitch, sizeof(tmp_rotationpitch));
  if (raw_rotationpitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_rotationpitch(), target);
  }

  // float rotationRoll = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotationroll = this->_internal_rotationroll();
  uint32_t raw_rotationroll;
  memcpy(&raw_rotationroll, &tmp_rotationroll, sizeof(tmp_rotationroll));
  if (raw_rotationroll != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_rotationroll(), target);
  }

  // float velocityX = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityx = this->_internal_velocityx();
  uint32_t raw_velocityx;
  memcpy(&raw_velocityx, &tmp_velocityx, sizeof(tmp_velocityx));
  if (raw_velocityx != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_velocityx(), target);
  }

  // float velocityY = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityy = this->_internal_velocityy();
  uint32_t raw_velocityy;
  memcpy(&raw_velocityy, &tmp_velocityy, sizeof(tmp_velocityy));
  if (raw_velocityy != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_velocityy(), target);
  }

  // float velocityZ = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityz = this->_internal_velocityz();
  uint32_t raw_velocityz;
  memcpy(&raw_velocityz, &tmp_velocityz, sizeof(tmp_velocityz));
  if (raw_velocityz != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_velocityz(), target);
  }

  // float hp = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_hp(), target);
  }

  // string ID = 13;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PROTOCOL.ACTOR.ID");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.ACTOR)
  return target;
}

size_t ACTOR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.ACTOR)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 13;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint64 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
  }

  // .PROTOCOL.ACTOR_TYPE actortype = 2;
  if (this->_internal_actortype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_actortype());
  }

  // float locationX = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locationx = this->_internal_locationx();
  uint32_t raw_locationx;
  memcpy(&raw_locationx, &tmp_locationx, sizeof(tmp_locationx));
  if (raw_locationx != 0) {
    total_size += 1 + 4;
  }

  // float locationY = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locationy = this->_internal_locationy();
  uint32_t raw_locationy;
  memcpy(&raw_locationy, &tmp_locationy, sizeof(tmp_locationy));
  if (raw_locationy != 0) {
    total_size += 1 + 4;
  }

  // float locationZ = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locationz = this->_internal_locationz();
  uint32_t raw_locationz;
  memcpy(&raw_locationz, &tmp_locationz, sizeof(tmp_locationz));
  if (raw_locationz != 0) {
    total_size += 1 + 4;
  }

  // float rotationYaw = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotationyaw = this->_internal_rotationyaw();
  uint32_t raw_rotationyaw;
  memcpy(&raw_rotationyaw, &tmp_rotationyaw, sizeof(tmp_rotationyaw));
  if (raw_rotationyaw != 0) {
    total_size += 1 + 4;
  }

  // float rotationPitch = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotationpitch = this->_internal_rotationpitch();
  uint32_t raw_rotationpitch;
  memcpy(&raw_rotationpitch, &tmp_rotationpitch, sizeof(tmp_rotationpitch));
  if (raw_rotationpitch != 0) {
    total_size += 1 + 4;
  }

  // float rotationRoll = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotationroll = this->_internal_rotationroll();
  uint32_t raw_rotationroll;
  memcpy(&raw_rotationroll, &tmp_rotationroll, sizeof(tmp_rotationroll));
  if (raw_rotationroll != 0) {
    total_size += 1 + 4;
  }

  // float velocityX = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityx = this->_internal_velocityx();
  uint32_t raw_velocityx;
  memcpy(&raw_velocityx, &tmp_velocityx, sizeof(tmp_velocityx));
  if (raw_velocityx != 0) {
    total_size += 1 + 4;
  }

  // float velocityY = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityy = this->_internal_velocityy();
  uint32_t raw_velocityy;
  memcpy(&raw_velocityy, &tmp_velocityy, sizeof(tmp_velocityy));
  if (raw_velocityy != 0) {
    total_size += 1 + 4;
  }

  // float velocityZ = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityz = this->_internal_velocityz();
  uint32_t raw_velocityz;
  memcpy(&raw_velocityz, &tmp_velocityz, sizeof(tmp_velocityz));
  if (raw_velocityz != 0) {
    total_size += 1 + 4;
  }

  // float hp = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ACTOR::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ACTOR::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ACTOR::GetClassData() const { return &_class_data_; }

void ACTOR::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ACTOR *>(to)->MergeFrom(
      static_cast<const ACTOR &>(from));
}


void ACTOR::MergeFrom(const ACTOR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.ACTOR)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_actortype() != 0) {
    _internal_set_actortype(from._internal_actortype());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locationx = from._internal_locationx();
  uint32_t raw_locationx;
  memcpy(&raw_locationx, &tmp_locationx, sizeof(tmp_locationx));
  if (raw_locationx != 0) {
    _internal_set_locationx(from._internal_locationx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locationy = from._internal_locationy();
  uint32_t raw_locationy;
  memcpy(&raw_locationy, &tmp_locationy, sizeof(tmp_locationy));
  if (raw_locationy != 0) {
    _internal_set_locationy(from._internal_locationy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locationz = from._internal_locationz();
  uint32_t raw_locationz;
  memcpy(&raw_locationz, &tmp_locationz, sizeof(tmp_locationz));
  if (raw_locationz != 0) {
    _internal_set_locationz(from._internal_locationz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotationyaw = from._internal_rotationyaw();
  uint32_t raw_rotationyaw;
  memcpy(&raw_rotationyaw, &tmp_rotationyaw, sizeof(tmp_rotationyaw));
  if (raw_rotationyaw != 0) {
    _internal_set_rotationyaw(from._internal_rotationyaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotationpitch = from._internal_rotationpitch();
  uint32_t raw_rotationpitch;
  memcpy(&raw_rotationpitch, &tmp_rotationpitch, sizeof(tmp_rotationpitch));
  if (raw_rotationpitch != 0) {
    _internal_set_rotationpitch(from._internal_rotationpitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotationroll = from._internal_rotationroll();
  uint32_t raw_rotationroll;
  memcpy(&raw_rotationroll, &tmp_rotationroll, sizeof(tmp_rotationroll));
  if (raw_rotationroll != 0) {
    _internal_set_rotationroll(from._internal_rotationroll());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityx = from._internal_velocityx();
  uint32_t raw_velocityx;
  memcpy(&raw_velocityx, &tmp_velocityx, sizeof(tmp_velocityx));
  if (raw_velocityx != 0) {
    _internal_set_velocityx(from._internal_velocityx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityy = from._internal_velocityy();
  uint32_t raw_velocityy;
  memcpy(&raw_velocityy, &tmp_velocityy, sizeof(tmp_velocityy));
  if (raw_velocityy != 0) {
    _internal_set_velocityy(from._internal_velocityy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityz = from._internal_velocityz();
  uint32_t raw_velocityz;
  memcpy(&raw_velocityz, &tmp_velocityz, sizeof(tmp_velocityz));
  if (raw_velocityz != 0) {
    _internal_set_velocityz(from._internal_velocityz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = from._internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    _internal_set_hp(from._internal_hp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ACTOR::CopyFrom(const ACTOR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.ACTOR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACTOR::IsInitialized() const {
  return true;
}

void ACTOR::InternalSwap(ACTOR* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ACTOR, hp_)
      + sizeof(ACTOR::hp_)
      - PROTOBUF_FIELD_OFFSET(ACTOR, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ACTOR::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Struct3_2eproto_getter, &descriptor_table_Struct3_2eproto_once,
      file_level_metadata_Struct3_2eproto[0]);
}

// ===================================================================

class ACTORLIST::_Internal {
 public:
};

ACTORLIST::ACTORLIST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  players_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.ACTORLIST)
}
ACTORLIST::ACTORLIST(const ACTORLIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.ACTORLIST)
}

inline void ACTORLIST::SharedCtor() {
}

ACTORLIST::~ACTORLIST() {
  // @@protoc_insertion_point(destructor:PROTOCOL.ACTORLIST)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ACTORLIST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ACTORLIST::ArenaDtor(void* object) {
  ACTORLIST* _this = reinterpret_cast< ACTORLIST* >(object);
  (void)_this;
}
void ACTORLIST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ACTORLIST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ACTORLIST::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.ACTORLIST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ACTORLIST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PROTOCOL.ACTOR players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ACTORLIST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.ACTORLIST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PROTOCOL.ACTOR players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.ACTORLIST)
  return target;
}

size_t ACTORLIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.ACTORLIST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PROTOCOL.ACTOR players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ACTORLIST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ACTORLIST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ACTORLIST::GetClassData() const { return &_class_data_; }

void ACTORLIST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ACTORLIST *>(to)->MergeFrom(
      static_cast<const ACTORLIST &>(from));
}


void ACTORLIST::MergeFrom(const ACTORLIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.ACTORLIST)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ACTORLIST::CopyFrom(const ACTORLIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.ACTORLIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACTORLIST::IsInitialized() const {
  return true;
}

void ACTORLIST::InternalSwap(ACTORLIST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ACTORLIST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Struct3_2eproto_getter, &descriptor_table_Struct3_2eproto_once,
      file_level_metadata_Struct3_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PROTOCOL
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PROTOCOL::ACTOR* Arena::CreateMaybeMessage< ::PROTOCOL::ACTOR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::ACTOR >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::ACTORLIST* Arena::CreateMaybeMessage< ::PROTOCOL::ACTORLIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::ACTORLIST >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
